#!/usr/bin/env python3
"""
Script simplificado para probar conectividad b√°sica
"""

import requests
import json
import time
from datetime import datetime

def test_basic_connectivity():
    """Prueba conectividad b√°sica sin dependencias externas"""
    print("üîç PRUEBA DE CONECTIVIDAD B√ÅSICA")
    print("=" * 50)
    
    # 1. Probar endpoint de salud
    print("1. Probando endpoint de salud...")
    try:
        response = requests.get("http://127.0.0.1:8000/cotizaciones/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Servidor respondiendo: {data}")
        else:
            print(f"‚ö†Ô∏è Servidor respondi√≥ con c√≥digo: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ùå Servidor no est√° ejecut√°ndose en puerto 8000")
        print("üí° Para iniciar el servidor ejecute:")
        print("   uvicorn main:app --host 0.0.0.0 --port 8000")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    print("-" * 30)
    
    # 2. Probar endpoint de estado
    print("2. Probando endpoint de estado...")
    try:
        response = requests.get("http://127.0.0.1:8000/cotizaciones/status", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Estado obtenido: {json.dumps(data, indent=2)}")
        else:
            print(f"‚ö†Ô∏è Estado respondi√≥ con c√≥digo: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error obteniendo estado: {e}")
    
    print("-" * 30)
    
    # 3. Probar WebSocket status
    print("3. Probando estado de WebSocket...")
    try:
        response = requests.get("http://127.0.0.1:8000/cotizaciones/websocket_status", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ WebSocket status: {json.dumps(data, indent=2)}")
        else:
            print(f"‚ö†Ô∏è WebSocket status respondi√≥ con c√≥digo: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error obteniendo WebSocket status: {e}")
    
    print("-" * 30)
    
    # 4. Probar endpoint de diagn√≥stico de Telegram
    print("4. Probando diagn√≥stico de Telegram...")
    try:
        response = requests.get("http://127.0.0.1:8000/cotizaciones/telegram_diag", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Telegram diagn√≥stico: {json.dumps(data, indent=2)}")
        else:
            print(f"‚ö†Ô∏è Telegram diagn√≥stico respondi√≥ con c√≥digo: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error obteniendo diagn√≥stico de Telegram: {e}")

if __name__ == "__main__":
    test_basic_connectivity()

