#!/usr/bin/env python3
"""
Script para configurar certificados SSL en macOS
"""

import ssl
import os
import subprocess
import sys
from datetime import datetime

def print_ssl_info():
    """Imprime informaci√≥n sobre la configuraci√≥n SSL actual"""
    print("üîí INFORMACI√ìN SSL ACTUAL")
    print("=" * 50)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    print("üîç Configuraci√≥n SSL del sistema:")
    print(f"‚Ä¢ Python version: {sys.version}")
    print(f"‚Ä¢ SSL version: {ssl.OPENSSL_VERSION}")
    print(f"‚Ä¢ SSL version info: {ssl.OPENSSL_VERSION_INFO}")
    print()
    
    print("üìÅ Certificados del sistema:")
    try:
        cert_path = ssl.get_default_verify_paths()
        print(f"‚Ä¢ Certificados por defecto: {cert_path.default_cafile}")
        print(f"‚Ä¢ Directorio de certificados: {cert_path.default_capath}")
        print(f"‚Ä¢ Certificados del sistema: {cert_path.cafile}")
        print(f"‚Ä¢ Directorio del sistema: {cert_path.capath}")
    except Exception as e:
        print(f"‚ùå Error obteniendo informaci√≥n de certificados: {e}")
    print()
    
    print("üîß Configuraci√≥n SSL recomendada para macOS:")
    print("‚Ä¢ ssl_context.check_hostname = False")
    print("‚Ä¢ ssl_context.verify_mode = ssl.CERT_NONE")
    print("‚Ä¢ Usar contexto SSL personalizado")
    print()

def test_ssl_context():
    """Prueba la configuraci√≥n SSL"""
    print("üß™ PROBANDO CONFIGURACI√ìN SSL")
    print("=" * 50)
    
    try:
        # Crear contexto SSL personalizado
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        print("‚úÖ Contexto SSL personalizado creado exitosamente")
        print(f"‚Ä¢ check_hostname: {ssl_context.check_hostname}")
        print(f"‚Ä¢ verify_mode: {ssl_context.verify_mode}")
        
        return ssl_context
        
    except Exception as e:
        print(f"‚ùå Error creando contexto SSL: {e}")
        return None

def install_certificates():
    """Instala certificados actualizados en macOS"""
    print("üì¶ INSTALANDO CERTIFICADOS ACTUALIZADOS")
    print("=" * 50)
    
    try:
        # Comando para actualizar certificados en macOS
        result = subprocess.run([
            "/Applications/Python 3.13/Install Certificates.command"
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ Certificados actualizados exitosamente")
            print(result.stdout)
        else:
            print("‚ö†Ô∏è Error actualizando certificados:")
            print(result.stderr)
            
    except subprocess.TimeoutExpired:
        print("‚è∞ Timeout ejecutando instalador de certificados")
    except FileNotFoundError:
        print("‚ùå Instalador de certificados no encontrado")
        print("üí° Intenta ejecutar manualmente:")
        print("   /Applications/Python 3.13/Install Certificates.command")
    except Exception as e:
        print(f"‚ùå Error ejecutando instalador: {e}")

def create_ssl_fix_script():
    """Crea un script para aplicar la correcci√≥n SSL"""
    print("üìù CREANDO SCRIPT DE CORRECCI√ìN SSL")
    print("=" * 50)
    
    script_content = '''#!/usr/bin/env python3
"""
Script para aplicar correcci√≥n SSL en pyRofex
"""

import ssl
import os

def apply_ssl_fix():
    """Aplica la correcci√≥n SSL para macOS"""
    print("üîí Aplicando correcci√≥n SSL...")
    
    # Configurar contexto SSL
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE
    
    # Configurar variables de entorno
    os.environ['PYTHONHTTPSVERIFY'] = '0'
    os.environ['SSL_VERIFY'] = 'False'
    
    print("‚úÖ Correcci√≥n SSL aplicada")
    return ssl_context

if __name__ == "__main__":
    apply_ssl_fix()
'''
    
    try:
        with open('ssl_fix.py', 'w') as f:
            f.write(script_content)
        print("‚úÖ Script ssl_fix.py creado exitosamente")
    except Exception as e:
        print(f"‚ùå Error creando script: {e}")

def main():
    """Funci√≥n principal"""
    print("üîí DIAGN√ìSTICO Y CORRECCI√ìN SSL PARA macOS")
    print("=" * 60)
    print()
    
    # Informaci√≥n SSL
    print_ssl_info()
    
    # Probar contexto SSL
    ssl_context = test_ssl_context()
    
    # Instalar certificados
    install_certificates()
    
    # Crear script de correcci√≥n
    create_ssl_fix_script()
    
    print("üéØ RECOMENDACIONES FINALES:")
    print("=" * 50)
    print("1. üîß Usar contexto SSL personalizado en pyRofex")
    print("2. üì¶ Actualizar certificados del sistema")
    print("3. üîÑ Reiniciar el servidor despu√©s de aplicar correcciones")
    print("4. üß™ Probar la conexi√≥n ROFEX")
    print()
    
    print("üí° COMANDOS √öTILES:")
    print("‚Ä¢ Actualizar certificados: /Applications/Python 3.13/Install Certificates.command")
    print("‚Ä¢ Verificar SSL: python3 -c 'import ssl; print(ssl.OPENSSL_VERSION)'")
    print("‚Ä¢ Probar contexto: python3 ssl_fix.py")
    print()
    
    if ssl_context:
        print("‚úÖ El contexto SSL personalizado est√° listo para usar")
    else:
        print("‚ùå Hay problemas con la configuraci√≥n SSL")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë Diagn√≥stico SSL interrumpido por el usuario")
    except Exception as e:
        print(f"\nüí• Error inesperado: {e}")

